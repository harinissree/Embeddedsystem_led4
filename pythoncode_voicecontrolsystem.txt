import speech_recognition as sr
import pyttsx3


import random
import time

from paho.mqtt import client as mqtt_client

broker = 'broker.emqx.io'
port = 1883
topic = "esp8266/led"
# Generate a Client ID with the publish prefix.
client_id = f'publish-{random.randint(0, 1000)}'
# username = 'emqx'
# password = 'public'

def connect_mqtt():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed to connect, return code %d\n", rc)

    client = mqtt_client.Client(client_id)
    # client.username_pw_set(username, password)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client

def publish(client):
            
       
    
   
            
                while True:
                    msg = listen()
                    print(msg)
                    if 'pluto' in msg:
                        if  'on' in msg or 'on led' in msg or 'on the led' in msg:
                            cmd='on' 
                            result = client.publish(topic, cmd)
                        elif 'off' in msg or 'off led' in msg or 'off the led' in msg:
                            cmd='off'
                            result = client.publish(topic, cmd)
                        elif 'stop' in msg:
                            return False
                    else:
                        print('Command not recognised')
            

            
            #msg='off'
                    
      

r = sr.Recognizer()
engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()




def listen():
    with sr.Microphone() as source:
        
        time.sleep(1)
        print("Listening...")
        
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source, phrase_time_limit=3)
    try:
        text = r.recognize_google(audio)
        print(f"You said: {text}")
        if True:
            return text.lower()
    except sr.UnknownValueError:
        print("Didn't understand what you said.")
    except sr.RequestError:
        print("Sorry, my speech recognition service is currently down")

def run():
    client = connect_mqtt()
    client.loop_start()
    publish(client)
    client.loop_stop()


if __name__ == '__main__':
    run()
